
openapi: 3.1.0
info:
  title: CorridorOS Control Plane
  version: 0.1.0
servers:
  - url: http://localhost:7080
paths:
  /v1/corridors:
    post:
      summary: Allocate a photonic corridor
      operationId: allocateCorridor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CorridorRequest'
      responses:
        '201':
          description: Corridor created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorridorReply'
  /v1/corridors/{id}/telemetry:
    get:
      summary: Corridor telemetry
      operationId: corridorTelemetry
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Telemetry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorridorTelemetry'
  /v1/corridors/{id}/recalibrate:
    post:
      summary: HELIOPASS recalibration
      operationId: corridorRecalibrate
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecalibrateRequest'
      responses:
        '200':
          description: Recalibration result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecalibrateReply'

  /v1/ffm/alloc:
    post:
      summary: Allocate Free-Form Memory
      operationId: ffmAlloc
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FFMAllocRequest'
      responses:
        '200':
          description: Allocation handle
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FFMAllocReply'
  /v1/ffm/{handle}/bandwidth:
    patch:
      summary: Adjust bandwidth floor for an FFM bundle
      operationId: ffmSetBandwidth
      parameters:
        - name: handle
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/FFMBandwidthPatch' }
      responses:
        '200':
          description: Updated
  /v1/ffm/{handle}/latency_class:
    patch:
      summary: Migrate bundle to a target latency tier
      operationId: ffmSetLatencyClass
      parameters:
        - name: handle
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/FFMLatencyPatch' }
      responses:
        '202':
          description: Migration initiated
  /v1/ffm/{handle}/telemetry:
    get:
      summary: FFM telemetry
      operationId: ffmTelemetry
      parameters:
        - name: handle
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Stats
          content:
            application/json:
              schema: { $ref: '#/components/schemas/FFMTelemetry' }

  /v1/attest/verify:
    post:
      summary: Verify device/firmware attestation and issue a ticket
      operationId: attestVerify
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AttestRequest' }
      responses:
        '200':
          description: Attestation result
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AttestReply' }

components:
  schemas:
    CorridorRequest:
      type: object
      properties:
        type: { type: string, enum: [SiCorridor, CarbonCorridor] }
        lanes: { type: integer, minimum: 1 }
        lambda_nm:
          type: array
          items: { type: integer }
        min_gbps: { type: integer }
        latency_budget_ns: { type: integer }
        reach_mm: { type: integer }
        mode: { type: string, enum: [waveguide, free-space] }
        qos:
          type: object
          properties:
            pfc: { type: boolean }
            priority: { type: string }
        attestation_required: { type: boolean }
      required: [type, lanes, lambda_nm, min_gbps]
    CorridorReply:
      type: object
      properties:
        corridor_id: { type: string }
        achievable_gbps: { type: number }
        ber: { type: number }
        eye_margin: { type: string }
    CorridorTelemetry:
      type: object
      properties:
        ber: { type: number }
        tempC: { type: number }
        power_pJ_per_bit: { type: number }
        drift: { type: string }
    RecalibrateRequest:
      type: object
      properties:
        target_ber: { type: number }
        ambient_profile: { type: string }
    RecalibrateReply:
      type: object
      properties:
        status: { type: string }
        new_bias_mV:
          type: array
          items: { type: number }
        lambda_shifts_nm:
          type: array
          items: { type: number }

    FFMAllocRequest:
      type: object
      properties:
        bytes: { type: integer }
        latency_class: { type: string, enum: [T0,T1,T2,T3] }
        bandwidth_floor_GBs: { type: integer }
        persistence: { type: string, enum: [none, durable] }
        shareable: { type: boolean }
        security_domain: { type: string }
      required: [bytes, latency_class]
    FFMAllocReply:
      type: object
      properties:
        ffm_handle: { type: string }
        fds:
          type: array
          items: { type: string }
        policy_lease_ttl_s: { type: integer }
    FFMBandwidthPatch:
      type: object
      properties:
        floor_GBs: { type: integer }
      required: [floor_GBs]
    FFMLatencyPatch:
      type: object
      properties:
        target: { type: string, enum: [T0,T1,T2,T3] }
      required: [target]
    FFMTelemetry:
      type: object
      properties:
        achieved_GBs: { type: number }
        moved_pages: { type: integer }
        tail_p99_ms: { type: number }

    AttestRequest:
      type: object
      properties:
        device_id: { type: string }
        claims: { type: object }
      required: [device_id]
    AttestReply:
      type: object
      properties:
        ok: { type: boolean }
        ticket: { type: string }
        details: { type: object }
