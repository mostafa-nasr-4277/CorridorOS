apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: corridors.corridoros.io
spec:
  group: corridoros.io
  scope: Namespaced
  names:
    plural: corridors
    singular: corridor
    kind: Corridor
    shortNames: [cor]
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            required: [lanes, lambdaNm, minGbps, latencyBudgetNs]
            properties:
              type:
                type: string
                enum: ["SiCorridor","CarbonCorridor"]
                default: "SiCorridor"
              lanes:
                type: integer
                minimum: 1
              lambdaNm:
                type: array
                items: { type: integer }
              minGbps:
                type: integer
              latencyBudgetNs:
                type: integer
              reachMm:
                type: integer
              mode:
                type: string
                enum: ["waveguide","free-space"]
                default: "waveguide"
              qos:
                type: object
                properties:
                  pfc: { type: boolean }
                  priority: { type: string }
              attestationRequired:
                type: boolean
                default: true
              recalibration:
                type: object
                properties:
                  targetBer: { type: number }
                  ambientProfile: { type: string }
          status:
            type: object
            properties:
              phase: { type: string }
              corridorId: { type: string }
              achievableGbps: { type: number }
              telemetry:
                type: object
                properties:
                  ber: { type: number }
                  eyeMargin: { type: string }
                  tempC: { type: number }
                  powerPJPerBit: { type: number }
                  drift: { type: string }
              conditions:
                type: array
                items:
                  type: object
                  properties:
                    type: { type: string }
                    status: { type: string }
                    reason: { type: string }
                    message: { type: string }
                    lastTransitionTime: { type: string, format: date-time }
