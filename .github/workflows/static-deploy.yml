name: CorridorOS Stable Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Clean problematic files and directories
        run: |
          set -euo pipefail
          
          echo "üßπ Cleaning workspace..."
          
          # Remove any files/dirs with problematic characters
          find . -name "*WARNING*" -type f -delete 2>/dev/null || true
          find . -name "*INFO*" -type f -delete 2>/dev/null || true
          find . -name "*SUCCESS*" -type f -delete 2>/dev/null || true
          find . -name "*WARNING*" -type d -exec rm -rf {} + 2>/dev/null || true
          find . -name "*INFO*" -type d -exec rm -rf {} + 2>/dev/null || true
          find . -name "*SUCCESS*" -type d -exec rm -rf {} + 2>/dev/null || true
          
          # Remove hidden problematic files
          find . -name ".*WARNING*" -delete 2>/dev/null || true
          find . -name ".*INFO*" -delete 2>/dev/null || true
          find . -name ".*SUCCESS*" -delete 2>/dev/null || true
          
          # Clean up any remaining problematic paths
          python3 << 'EOF' || true
          import os
          import shutil
          import glob
          
          # Clean up any remaining problematic entries
          for root, dirs, files in os.walk('.'):
              for d in dirs[:]:  # Use slice to modify during iteration
                  if any(x in d for x in ['[WARNING]', '[INFO]', '[SUCCESS]', '\033']):
                      try:
                          shutil.rmtree(os.path.join(root, d))
                          dirs.remove(d)
                      except:
                          pass
              for f in files:
                  if any(x in f for x in ['[WARNING]', '[INFO]', '[SUCCESS]', '\033']):
                      try:
                          os.remove(os.path.join(root, f))
                      except:
                          pass
          EOF
          
          echo "‚úÖ Cleanup complete"
        
      - name: Clean Rust build artifacts
        run: |
          set -euo pipefail
          
          echo "üßπ Cleaning Rust build artifacts..."
          
          # Remove all target directories
          find . -name "target" -type d -exec rm -rf {} + 2>/dev/null || true
          
          # Remove Cargo.lock files (they're generated)
          find . -name "Cargo.lock" -type f -delete 2>/dev/null || true
          
          # Remove any remaining build artifacts
          find . -name "*.rlib" -type f -delete 2>/dev/null || true
          find . -name "*.rmeta" -type f -delete 2>/dev/null || true
          find . -name "*.d" -type f -delete 2>/dev/null || true
          find . -name "CACHEDIR.TAG" -type f -delete 2>/dev/null || true
          
          echo "‚úÖ Rust artifacts cleaned"
        
      - name: Create curated deployment package
        run: |
          set -euo pipefail
          
          echo "üì¶ Creating curated deployment package..."
          
          DEPLOY_DIR="deploy_artifact"
          rm -rf "$DEPLOY_DIR"
          mkdir "$DEPLOY_DIR"
          
          RSYNC_EXCLUDES=(
            ".git"
            ".github"
            ".gocache"
            ".gomodcache"
            "node_modules"
            "*.tar.gz"
            "*.zip"
            "*.dmg"
            "*.iso"
            "*.img"
            "*.bin"
            "**/target"
            "**/Cargo.lock"
            "**/*.rlib"
            "**/*.rmeta"
            "**/*.d"
            "**/build"
            "**/incremental"
            "**/release"
            "**/debug"
            "**/CACHEDIR.TAG"
          )
          
          # Copy files with exclusions (avoid recursive copy)
          RSYNC_CMD=(rsync -a --delete)
          for pattern in "${RSYNC_EXCLUDES[@]}"; do
            RSYNC_CMD+=(--exclude "$pattern")
          done
          # Exclude the deploy directory itself to prevent recursion
          RSYNC_CMD+=(--exclude "$DEPLOY_DIR")
          RSYNC_CMD+=(./ "$DEPLOY_DIR/")
          "${RSYNC_CMD[@]}"
          
          # Verify critical files exist
          if [ ! -f "$DEPLOY_DIR/index.html" ]; then
            echo "‚ùå Critical file index.html missing!"
            exit 1
          fi
          
          # Ensure .nojekyll exists within deployment package
          touch "$DEPLOY_DIR/.nojekyll"
          
          # Count files to deploy
          FILE_COUNT=$(find "$DEPLOY_DIR" -type f | wc -l)
          echo "üìä Deploying $FILE_COUNT files after curation"
          
          echo "‚úÖ Deployment package ready"
        
      - name: Verify deployment package
        run: |
          echo "üìã Contents of deploy_artifact:"
          ls -la deploy_artifact/
          echo "üìä File count in deploy_artifact:"
          find deploy_artifact -type f | wc -l
          echo "üîç Checking for problematic files:"
          find deploy_artifact -name "*WARNING*" -o -name "*INFO*" -o -name "*SUCCESS*" || echo "‚úÖ No problematic files found"
          echo "üîç Checking for Rust build artifacts:"
          find deploy_artifact -name "target" -o -name "*.rlib" -o -name "*.rmeta" -o -name "*.d" -o -name "Cargo.lock" || echo "‚úÖ No Rust build artifacts found"
          echo "üîç Checking for large files that might cause issues:"
          find deploy_artifact -type f -size +10M -exec ls -lh {} \; || echo "‚úÖ No large files found"
        
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: deploy_artifact
          
  deploy:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
