name: CorridorOS Stable Deployment (v4)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Create curated deployment package
        run: |
          set -euo pipefail
          echo "üì¶ Preparing _site/ for GitHub Pages from dist/"
          SITE_DIR="_site"
          rm -rf "$SITE_DIR" && mkdir "$SITE_DIR"
          
          # Check if dist directory exists and has content
          if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
            echo "‚úÖ Using dist/ directory as source"
            cp -a dist/* "$SITE_DIR/"
          else
            echo "‚ö†Ô∏è  dist/ directory not found or empty, falling back to root files"
            # Use cp -a to avoid rsync dependency; prune heavy/dev folders
            shopt -s dotglob
            for f in *; do
              case "$f" in
                .git|.github|node_modules|dist|deploy_artifact|_site) ;; # skip
                daemon)              # remove built targets within daemon
                  cp -a "$f" "$SITE_DIR/" && find "$SITE_DIR/$f" -name target -type d -prune -exec rm -rf {} + || true ;;
                *) cp -a "$f" "$SITE_DIR/" ;;
              esac
            done
            shopt -u dotglob
          fi
          
          # Additional pruning
          find "$SITE_DIR" -name "Cargo.lock" -delete || true
          find "$SITE_DIR" -name "*.rlib" -o -name "*.rmeta" -o -name "*.d" -delete || true
          touch "$SITE_DIR/.nojekyll"
          test -f "$SITE_DIR/index.html" || { echo "‚ùå index.html missing in _site"; ls -la "$SITE_DIR"; exit 1; }
          echo "‚úÖ _site prepared"
        
      - name: Verify deployment package
        run: |
          echo "üìã Contents of _site:"
          ls -la _site/ | head -n 200
          echo "üìä File count in _site:"
          find _site -type f | wc -l
          echo "üîç Checking for problematic files:"
          find _site -name "*WARNING*" -o -name "*INFO*" -o -name "*SUCCESS*" || echo "‚úÖ No problematic files found"
          echo "üîç Checking for Rust build artifacts:"
          find _site -name "target" -o -name "*.rlib" -o -name "*.rmeta" -o -name "*.d" -o -name "Cargo.lock" || echo "‚úÖ No Rust build artifacts found"
          echo "üîç Checking for large files that might cause issues:"
          find _site -type f -size +10M -exec ls -lh {} \; || echo "‚úÖ No large files found"
        
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: _site
          
  deploy:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
