name: CorridorOS Pages Deploy

on:
  push:
    branches: [ main ]
    # Only deploy when site assets change (gentler on CI)
    paths:
      - 'index.html'
      - 'corridor-os.html'
      - 'corridoros_*.html'
      - 'brand/**'
      - 'apps/**'
      - 'service-worker.js'
      - 'manifest.webmanifest'
      - 'scripts/prepare_dist.sh'
    tags:
      - 'v*'
      - 'deploy-*'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    # Opt-in deploys: manual, tag push, or commit message contains [deploy]
    if: >-
      ${{ github.event_name == 'workflow_dispatch' ||
          startsWith(github.ref, 'refs/tags/') ||
          (github.event_name == 'push' && contains(github.event.head_commit.message, '[deploy]')) }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build dist
        shell: bash
        run: |
          set -euo pipefail
          bash scripts/prepare_dist.sh
      - name: Validate built files
        shell: bash
        run: |
          set -euo pipefail
          test -f dist/index.html || (echo "dist/index.html missing" && exit 1)
          test -f dist/404.html || (echo "dist/404.html missing" && exit 1)
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: dist
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: Smoke check (optional, tolerant)
        continue-on-error: true
        env:
          BASE_URL: ${{ steps.deployment.outputs.page_url }}
          CUSTOM_DOMAIN: ${{ secrets.CUSTOM_DOMAIN }}
        shell: bash
        run: |
          set -euo pipefail
          # Propagation wait (default 30s)
          sleep ${PAGES_WAIT:-30}
          echo "ðŸ”Ž Base URL: $BASE_URL"
          BUST=$RANDOM
          # Helper: retry a command with backoff
          retry() { local n=0 max=${2:-12} delay=${3:-10}; until [ $n -ge $max ]; do "$1" && break; n=$((n+1)); sleep $delay; done; [ $n -lt $max ]; }

          check_index() {
            curl -sS --retry 5 --retry-delay 2 --retry-all-errors -H "Cache-Control: no-cache" "${BASE_URL}?v=${BUST}" | grep -q 'Reserve Light. Guarantee Memory.'
          }

          check_os_page() {
            code=$(curl -sS -IL --retry 5 --retry-delay 2 --retry-all-errors -H "Cache-Control: no-cache" "${BASE_URL}corridor-os.html?v=${BUST}" -o /dev/null -w "%{http_code}");
            [[ "$code" =~ ^(200|301|302|304)$ ]]
          }

          retry check_index 12 10 || echo "(warn) index content probe did not pass after retries"
          retry check_os_page 12 10 || echo "(warn) OS page probe did not pass after retries"

          # Optional asset check â€” never fail the workflow
          code=$(curl -sS -IL --retry 3 --retry-delay 2 --retry-all-errors -H "Cache-Control: no-cache" "${BASE_URL}demo/corridoros-demo.mp4?v=${BUST}" -o /dev/null -w "%{http_code}" || true)
          if ! [[ "$code" =~ ^(200|301|302|304)$ ]]; then echo "(info) demo video not reachable yet (${code})"; fi
          if [ -n "${CUSTOM_DOMAIN:-}" ]; then
            echo "â†’ Checking https://${CUSTOM_DOMAIN}/ (optional)"
            curl -sS --retry 5 --retry-delay 3 --retry-all-errors -H "Cache-Control: no-cache" \
              "https://${CUSTOM_DOMAIN}/?v=${BUST}" | grep -q 'Reserve Light. Guarantee Memory.' || echo "(info) custom domain not ready yet"
          fi
          echo "âœ… Smoke checks passed"
